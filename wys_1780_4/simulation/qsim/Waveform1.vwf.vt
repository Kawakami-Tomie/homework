// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2024 14:05:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          wys_1780_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wys_1780_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkin;
reg clr;
reg [3:0] data;
reg en;
reg load;
reg upd;
// wires                                               
wire CO;
wire [3:0] Q;

// assign statements (if any)                          
wys_1780_4 i1 (
// port map - connection between master ports and signals/registers   
	.CO(CO),
	.Q(Q),
	.clkin(clkin),
	.clr(clr),
	.data(data),
	.en(en),
	.load(load),
	.upd(upd)
);
initial 
begin 
#1000000 $finish;
end 

// upd
initial
begin
	upd = 1'b0;
end 

// en
initial
begin
	en = 1'b1;
end 

// load
initial
begin
	load = 1'b1;
	load = #50000 1'b0;
	load = #70000 1'b1;
end 

// clr
initial
begin
	clr = 1'b1;
end 

// clkin
always
begin
	clkin = 1'b0;
	clkin = #10000 1'b1;
	#10000;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #50000 1'b1;
	data[2] = #70000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #50000 1'b1;
	data[1] = #70000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #50000 1'b1;
	data[0] = #70000 1'b0;
end 
endmodule

