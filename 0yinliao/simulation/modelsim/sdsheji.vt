//// Copyright (C) 2018  Intel Corporation. All rights reserved.
//// Your use of Intel Corporation's design tools, logic functions 
//// and other software and tools, and its AMPP partner logic 
//// functions, and any output files from any of the foregoing 
//// (including device programming or simulation files), and any 
//// associated documentation or information are expressly subject 
//// to the terms and conditions of the Intel Program License 
//// Subscription Agreement, the Intel Quartus Prime License Agreement,
//// the Intel FPGA IP License Agreement, or other applicable license
//// agreement, including, without limitation, that your use is for
//// the sole purpose of programming logic devices manufactured by
//// Intel and sold by Intel or its authorized distributors.  Please
//// refer to the applicable agreement for further details.
//
//// *****************************************************************************
//// This file contains a Verilog test bench template that is freely editable to  
//// suit user's needs .Comments are provided in each section to help the user    
//// fill out necessary details.                                                  
//// *****************************************************************************
//// Generated on "06/12/2024 20:38:26"
//                                                                                
//// Verilog Test Bench template for design : sdsheji
//// 
//// Simulation tool : ModelSim-Altera (Verilog)
//// 
//
//`timescale 1 ps/ 1 ps
//module sdsheji_vlg_tst();
//// constants                                           
//// general purpose registers
//reg eachvec;
//// test vector input registers
//reg clk;
//reg half;
//reg one;
//reg reset;
//// wires                                               
//wire [7:0]  out;
//wire [7:0]  seg;
//wire ydrink;
//wire ymoney;
//
//// assign statements (if any)                          
//sdsheji i1 (
//// port map - connection between master ports and signals/registers   
//	.clk(clk),
//	.half(half),
//	.one(one),
//	.out(out),
//	.reset(reset),
//	.seg(seg),
//	.ydrink(ydrink),
//	.ymoney(ymoney)
//);
//initial                                                
//begin                                                  
//// code that executes only once                        
//// insert code here --> begin                          
//                                                       
//// --> end                                             
//$display("Running testbench");                       
//end                                                    
//always                                                 
//// optional sensitivity list                           
//// @(event1 or event2 or .... eventn)                  
//begin                                                  
//// code executes for every event on sensitivity list   
//// insert code here --> begin                          
//                                                       
//@eachvec;                                              
//// --> end                                             
//end                                                    
//endmodule


`timescale 1ns/1ns
module T_sdsheji;
reg one;
reg half;
reg reset;
reg clk;
wire ydrink;
wire ymoney;
wire [7:0]seg;
wire [7:0]out;

sdsheji test1(
.one(one),
.half(half),
.reset(reset),
.clk(clk),
.ydrink(ydrink),
.ymoney(ymoney),
.seg(seg),
.out(out)
);

initial begin
reset = 0;
half = 0;
one = 0;
clk = 0;
#100
reset = 1;
//连续投入0.5元
#200
half = 1;
#200
half = 0;
#200
half = 1;
#200
half = 0;
#200
half = 1;
#200
half = 0;10
#20
reset = 0;
#20
reset = 1;
//连续投入一元
#200
one = 1;
#200
one = 0;
#200
one = 1;
#200
one = 0;
#20
reset = 0;
#20
reset = 1;
//先投1元，再投0.5元
#200
one =1;
#200
one = 0;
#200
half = 1;
#200
half = 0;
#20
reset = 0;
#20
reset = 1;
//先投0.5元，再投1元
#200
half =1;
#200
half= 0;
#200
one = 1;
#200
one = 0;
#20
reset = 0;
#20
reset = 1;

end


always #1 clk = ~clk;


endmodule

