// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/13/2024 00:19:46"
                                                                                
// Verilog Test Bench template for design : ks
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module ks_vlg_tst();
// constants                                           
// general purpose registers
// test vector input registers
reg clk;
reg half;
reg one;
reg reset;
// wires                                               
wire changemoney;
wire drinkout;
wire [7:0]  out;
wire [7:0]  seg;

// assign statements (if any)                          
ks i1 (
// port map - connection between master ports and signals/registers   
	.changemoney(changemoney),
	.clk(clk),
	.drinkout(drinkout),
	.half(half),
	.one(one),
	.out(out),
	.reset(reset),
	.seg(seg)
);
initial                                                
begin                                                  
reset = 0;
half = 0;
one = 0;
clk = 0;
#100
reset = 1;  

//0.5 0.5 0.5
#300
half = 1;
#300
half = 0;
#300
half = 1;
#300
half = 0;
#300
half = 1;
#300
half = 0;
#100
reset = 0;//复位信号
#100
reset = 1;

//0.5 1
#300
half =1;
#300
half= 0;
#300
one = 1;
#300
one = 0;
#100
reset = 0;
#100
reset = 1;

//0.5 0.5  1 需要找零
#300
half =1;
#300
half= 0;
#300
half =1;
#300
half= 0;
#300
one = 1;
#300
one = 0;
#100
reset = 0;
#100
reset = 1;

//1 1 需要找零
#300
one = 1;
#300
one = 0;
#300
one = 1;
#300
one = 0;
#100
reset = 0;
#100
reset = 1;

//1 0.5
#300
one =1;
#300
one = 0;
#300
half = 1;
#300
half = 0;
#100
reset = 0;
#100
reset = 1;

                  
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#1 clk = ~clk;                                                      
                                             
// --> end                                             
end                                                    
endmodule

